output {
  
#  stdout { codec => rubydebug }

  if "rpz" in [tags] {  

jdbc {
          driver_jar_path => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.18.jar"
          connection_string => 'jdbc:postgresql://localhost:5432/threatidr?user=postgres&password=abcd12345'
          statement => [ "INSERT INTO threats (source_ip, tld, query_domain, cc_tld_name, policy_name, domain_ip, geoip, geoip_city, tags, timestamp, message, query_type, sld) VALUES(?::inet, ?, ?, ?, ?, ?, ?::jsonb, ?::jsonb, ?::jsonb, ?::timestamp, ?, ?, ?)", "sourceIP", "TLD", "queryDomain", "CCTLDName", "policyName", "domainIp", "geoip", "geoip_city", "tags", "timestamp", "message", "queryType", "SLD"]

     }


    }

  else if "bind" in [tags] {

    jdbc {
          driver_jar_path => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.18.jar"
          connection_string => 'jdbc:postgresql://localhost:5432/threatidr?user=postgres&password=abcd12345'
          statement => [ "INSERT INTO dnslogs (source_ip, tld, query_domain, cc_tld_name, policy_name, domain_ip, geoip, geoip_city, tags, timestamp, message, query_type, sld) VALUES(?::inet, ?, ?, ?, ?, ?, ?::jsonb, ?::jsonb, ?::jsonb, ?::timestamp, ?, ?, ?)", "sourceIP", "TLD", "queryDomain", "CCTLDName", "policyName", "domainIp", "geoip", "geoip_city", "tags", "timestamp", "message", "queryType", "SLD"]

     }
    }

  else if "xfer" in [tags] {

    jdbc {
          driver_jar_path => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.18.jar"
          connection_string => 'jdbc:postgresql://localhost:5432/threatidr?user=postgres&password=abcd12345'
          statement => [ "INSERT INTO zone_transfers (timestamp, tags, zone, transfer_from, status) VALUES(?::timestamp, ?::jsonb, ?, ?::CIDR, ?)", "timestamp", "tags", "zone", "transfer_from", "status"]
     }
    }

  else {

    jdbc {
         driver_jar_path => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.18.jar"
         connection_string => 'jdbc:postgresql://localhost:5432/threatidr?user=postgres&password=abcd12345'
         statement => [ "INSERT INTO unusual_logs (source_ip, query_domain, tags, timestamp, message, query_type) VALUES(?::inet, ?, ?::jsonb, ?::timestamp, ?, ?)", "sourceIP",  "queryDomain", "tags", "timestamp", "message", "queryType"]
      }

   }


}






